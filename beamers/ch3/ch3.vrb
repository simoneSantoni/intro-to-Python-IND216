\frametitle{Iterations and Comprhensions}
        \begin{columns}
            \begin{column}{0.35\textwidth}
            \quad \textbf{What:}
            As we know from the previous section, \texttt{while} and \texttt{for} loops can handle most repetitive tasks programs need to perform.  One of the most prominent tools is \href{https://docs.python.org/3/tutorial/datastructures.html}{\texttt{list comprehension}}.

            \vspace{1em}

            \quad \textbf{How and why:}
            List comprehnsions make loops \emph{easier to write/read} and \emph{more efficient}. In practice, we include a Python statement containing a for loop among brackets.
            \end{column}
            \begin{column}{0.55\textwidth}
            Snippets 4.38 --- nested for loops Vs. list comprhension
            \rule{\textwidth}{1pt}
                \scriptsize
                \begin{minted}{python}
# the for loop way
# --+ create an empty list
L = []
# --+ create a for loop appending the square of some items
>>> for i in range(3):
...    L.append(i ** 2)
# --+ print the list
>>> print(L)
[0, 1, 4]

# the list comprehension way
>>> L = [i ** 2 for i in range(3)]
>>> print(L)
[0, 1, 4]
               \end{minted}
           \rule{\textwidth}{1pt}
           \end{column}
    \end{columns}
